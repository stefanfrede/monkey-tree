{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "src/monkey-tree-item.js",
      "properties": [
        {
          "name": "renderComplete",
          "type": "?",
          "description": "Returns a promise which resolves after the element next renders.\nThe promise resolves to `true` if the element rendered and `false` if the\nelement did not render.\nThis is useful when users (e.g. tests) need to react to the rendered state\nof the element after a change is made.\nThis can also be useful in event handlers if it is desireable to wait\nto send an event until after rendering. If possible implement the\n`_didRender` method to directly respond to rendering within the\nrendering lifecycle.\n     ",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 217,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "children",
          "type": "Array.<Object>",
          "description": "Return the children of the node.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 2
            },
            "end": {
              "line": 50,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "icon",
          "type": "string",
          "description": "Return the icon name of the node.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 2
            },
            "end": {
              "line": 69,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "id",
          "type": "string",
          "description": "Return the id of the node or create one.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "marked",
          "type": "boolean",
          "description": "Return if the node is marked or not.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 109,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "name",
          "type": "string",
          "description": "Return the name of the node.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 2
            },
            "end": {
              "line": 134,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "opened",
          "type": "boolean",
          "description": "Return if the node is opened or not.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 2
            },
            "end": {
              "line": 152,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "selected",
          "type": "boolean",
          "description": "Return if the node is selected or not.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 2
            },
            "end": {
              "line": 180,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "data",
          "type": "{name: string, icon: string, children: Array.<Object>}",
          "description": "Metadata describing the root node.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 6
            },
            "end": {
              "line": 17,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "Selection type.\nPossible values are:\nall: All nodes are selectable.\nbranch: Only branch nodes are selectable.\nnode: Only nodes without children are selectable.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_opened",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_marked",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 29,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_selected",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "Override which sets up element rendering by calling* `_createRoot`\nand `_firstRendered`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_firstRendered",
          "description": "Called after the element DOM is rendered for the first time.\nImplement to perform tasks after first rendering like capturing a\nreference to a static node which must be directly manipulated.\nThis should not be commonly needed. For tasks which should be performed\nbefore first render, use the element constructor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 24
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_createRoot",
          "description": "Implement to customize where the element's template is rendered by\nreturning an element into which to render. By default this creates\na shadowRoot for the element. To render into the element's childNodes,\nreturn `this`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(Element | DocumentFragment)",
            "desc": "Returns a node into which to render."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldPropertiesChange",
          "description": "Override which returns the value of `_shouldRender` which users\nshould implement to control rendering. If this method returns false,\n_propertiesChanged will not be called and no rendering will occur even\nif property values change or `_requestRender` is called.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Default implementation always returns true."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldRender",
          "description": "Implement to control if rendering should occur when property values\nchange or `_requestRender` is called. By default, this method always\nreturns true, but this can be customized as an optimization to avoid\nrendering work when changes occur which should not be rendered.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 117,
              "column": 4
            },
            "end": {
              "line": 119,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Default implementation always returns true."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_propertiesChanged",
          "description": "Override which performs element rendering by calling\n`_render`, `_applyRender`, and finally `_didRender`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "description": "Current element properties"
            },
            {
              "name": "changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_flushProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 138,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Override which warns when a user attempts to change a property during\nthe rendering lifecycle. This is an anti-pattern and should be avoided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 151,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "description": "{string}"
            },
            {
              "name": "value",
              "description": "{any}"
            },
            {
              "name": "old",
              "description": "{any}"
            }
          ],
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_render",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 2
            },
            "end": {
              "line": 310,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_applyRender",
          "description": "Renders the given lit-html template `result` into the given `node`.\nImplement to customize the way rendering is applied. This is should not\ntypically be needed and is provided for advanced use cases.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 180,
              "column": 4
            },
            "end": {
              "line": 182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result",
              "description": "{TemplateResult} `lit-html` template result to render"
            },
            {
              "name": "node",
              "description": "{Element|DocumentFragment} node into which to render"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_didRender",
          "description": "Called after element DOM has been rendered. Implement to\ndirectly control rendered DOM. Typically this is not needed as `lit-html`\ncan be used in the `_render` method to set properties, attributes, and\nevent listeners. However, it is sometimes useful for calling methods on\nrendered elements, like calling `focus()` on an element to focus it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 193,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 53
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_requestRender",
          "description": "Call to request the element to asynchronously re-render regardless\nof whether or not any property changes are pending.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 198,
              "column": 54
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_invalidateProperties",
          "description": "Override which provides tracking of invalidated state.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 202,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_selectNode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 2
            },
            "end": {
              "line": 200,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_toggleNode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 2
            },
            "end": {
              "line": 210,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_renderStyle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 2
            },
            "end": {
              "line": 214,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_renderList",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 2
            },
            "end": {
              "line": 237,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_renderSelectionButton",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 2
            },
            "end": {
              "line": 273,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_renderToggleButton",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 2
            },
            "end": {
              "line": 289,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 311,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "MonkeyTreeItem",
      "attributes": [
        {
          "name": "data",
          "description": "Metadata describing the root node.",
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 6
            },
            "end": {
              "line": 17,
              "column": 18
            }
          },
          "metadata": {},
          "type": "{name: string, icon: string, children: Array.<Object>}"
        },
        {
          "name": "type",
          "description": "Selection type.\nPossible values are:\nall: All nodes are selectable.\nbranch: Only branch nodes are selectable.\nnode: Only nodes without children are selectable.",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 18
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "monkey-tree-item"
    },
    {
      "description": "`<monkey-tree>` is a __Polymer 3__ element displaying a browsable tree of\nselectable nodes (`<monkey-tree-item>`).\n\nJust add `<monkey-tree>` at the top of your `<body>` and provide\na `data-object` via the `data-attribute`.\n\n```html\n<monkey-tree\n  data=\"{\n    name: 'foobar',\n    children: [\n      { name: 'foo', icon: 'public' },\n      { name: 'bar' },\n      { name: 'baz', children: [ { name: 'qux'] }\n    ]\"></monkey-tree>\n```\n\nPer default, you are only able to select one node at a time. To be able to\nselect multiple nodes provide a `mode-attribute` with the value of `multi`.\n\n```html\n<monkey-tree\n  mode=\"multi\"\n  data=\"{\n    name: 'foobar',\n    children: [\n      { name: 'foo', icon: 'public' },\n      { name: 'bar' },\n      { name: 'baz', children: [ { name: 'qux'] }\n    ]\"></monkey-tree>\n```\n\nYou can restrict which type of nodes are selectable. To do so provide\na `type-attribute` with the value of either `branch` or `node`.\n\n```html\n<monkey-tree\n  type=\"branch|node\"\n  data=\"{\n    name: 'foobar',\n    children: [\n      { name: 'foo', icon: 'public' },\n      { name: 'bar' },\n      { name: 'baz', children: [ { name: 'qux'] }\n    ]\"></monkey-tree>\n```\nThe properties of the `data-object` which affect the `tree` are: `name`,\n`icon` and `children`. `name` and `icon` are `Strings`, and `children` is an\n`Array` of `Objects`.\n\n[Here](https://material.io/tools/icons/?style=baseline) is a list of\nselectable icons.",
      "summary": "",
      "path": "src/monkey-tree.js",
      "properties": [
        {
          "name": "renderComplete",
          "type": "?",
          "description": "Returns a promise which resolves after the element next renders.\nThe promise resolves to `true` if the element rendered and `false` if the\nelement did not render.\nThis is useful when users (e.g. tests) need to react to the rendered state\nof the element after a change is made.\nThis can also be useful in event handlers if it is desireable to wait\nto send an event until after rendering. If possible implement the\n`_didRender` method to directly respond to rendering within the\nrendering lifecycle.\n     ",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 217,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "disabled",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 2
            },
            "end": {
              "line": 119,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "data",
          "type": "{name: string, icon: string, children: Array.<Object>}",
          "description": "Metadata describing the root node.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "mode",
          "type": "string | null | undefined",
          "description": "Selection mode.\nPossible values are:\nsingle: Single selection.\nmulti: Multi selection.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 81,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "Selection type.\nPossible values are:\nall: All nodes are selectable.\nbranch: Only branch nodes are selectable.\nnode: Only nodes without children are selectable.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 6
            },
            "end": {
              "line": 90,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_model",
          "type": "Array.<Object>",
          "description": "Selected nodes.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 97,
              "column": 19
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 2
            },
            "end": {
              "line": 115,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_firstRendered",
          "description": "Called after the element DOM is rendered for the first time.\nImplement to perform tasks after first rendering like capturing a\nreference to a static node which must be directly manipulated.\nThis should not be commonly needed. For tasks which should be performed\nbefore first render, use the element constructor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 24
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_createRoot",
          "description": "Implement to customize where the element's template is rendered by\nreturning an element into which to render. By default this creates\na shadowRoot for the element. To render into the element's childNodes,\nreturn `this`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(Element | DocumentFragment)",
            "desc": "Returns a node into which to render."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldPropertiesChange",
          "description": "Override which returns the value of `_shouldRender` which users\nshould implement to control rendering. If this method returns false,\n_propertiesChanged will not be called and no rendering will occur even\nif property values change or `_requestRender` is called.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Default implementation always returns true."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldRender",
          "description": "Implement to control if rendering should occur when property values\nchange or `_requestRender` is called. By default, this method always\nreturns true, but this can be customized as an optimization to avoid\nrendering work when changes occur which should not be rendered.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 117,
              "column": 4
            },
            "end": {
              "line": 119,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Default implementation always returns true."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_propertiesChanged",
          "description": "Override which performs element rendering by calling\n`_render`, `_applyRender`, and finally `_didRender`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "description": "Current element properties"
            },
            {
              "name": "changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_flushProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 138,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Override which warns when a user attempts to change a property during\nthe rendering lifecycle. This is an anti-pattern and should be avoided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 151,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "description": "{string}"
            },
            {
              "name": "value",
              "description": "{any}"
            },
            {
              "name": "old",
              "description": "{any}"
            }
          ],
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_render",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 282,
              "column": 2
            },
            "end": {
              "line": 297,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  data,\n  type\n}"
            }
          ]
        },
        {
          "name": "_applyRender",
          "description": "Renders the given lit-html template `result` into the given `node`.\nImplement to customize the way rendering is applied. This is should not\ntypically be needed and is provided for advanced use cases.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 180,
              "column": 4
            },
            "end": {
              "line": 182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result",
              "description": "{TemplateResult} `lit-html` template result to render"
            },
            {
              "name": "node",
              "description": "{Element|DocumentFragment} node into which to render"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_didRender",
          "description": "Called after element DOM has been rendered. Implement to\ndirectly control rendered DOM. Typically this is not needed as `lit-html`\ncan be used in the `_render` method to set properties, attributes, and\nevent listeners. However, it is sometimes useful for calling methods on\nrendered elements, like calling `focus()` on an element to focus it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 193,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 53
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_requestRender",
          "description": "Call to request the element to asynchronously re-render regardless\nof whether or not any property changes are pending.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 198,
              "column": 54
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_invalidateProperties",
          "description": "Override which provides tracking of invalidated state.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/lit-element/lit-element.js",
            "start": {
              "line": 202,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_onSelect",
          "description": "Fired when node gets selected.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 210,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onToggle",
          "description": "Fired when node children gets toggled.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 2
            },
            "end": {
              "line": 222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deselectChild",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 2
            },
            "end": {
              "line": 241,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "children"
            },
            {
              "name": "parent"
            },
            {
              "name": "ancestors"
            },
            {
              "name": "target"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deselectChildren",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 2
            },
            "end": {
              "line": 253,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "children"
            },
            {
              "name": "selected"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 2
            },
            "end": {
              "line": 263,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            },
            {
              "name": "ancestors"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 2
            },
            "end": {
              "line": 280,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            },
            {
              "name": "selected"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 65,
          "column": 0
        },
        "end": {
          "line": 298,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "MonkeyTree",
      "attributes": [
        {
          "name": "data",
          "description": "Metadata describing the root node.",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 18
            }
          },
          "metadata": {},
          "type": "{name: string, icon: string, children: Array.<Object>}"
        },
        {
          "name": "mode",
          "description": "Selection mode.\nPossible values are:\nsingle: Single selection.\nmulti: Multi selection.",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 81,
              "column": 18
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "type",
          "description": "Selection type.\nPossible values are:\nall: All nodes are selectable.\nbranch: Only branch nodes are selectable.\nnode: Only nodes without children are selectable.",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 6
            },
            "end": {
              "line": 90,
              "column": 18
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "on-select",
          "description": "Fired when node gets selected.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "on-toggle",
          "description": "Fired when node children gets toggled.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "monkey-tree"
    }
  ]
}
